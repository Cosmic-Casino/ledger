// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmicbet/wta/v1beta1/models.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Ticket represents a single entry for the next drawn
type Ticket struct {
	Id        string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner     string    `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Timestamp time.Time `protobuf:"bytes,3,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
}

func (m *Ticket) Reset()         { *m = Ticket{} }
func (m *Ticket) String() string { return proto.CompactTextString(m) }
func (*Ticket) ProtoMessage()    {}
func (*Ticket) Descriptor() ([]byte, []int) {
	return fileDescriptor_351a58cdbed24e72, []int{0}
}
func (m *Ticket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ticket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ticket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ticket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticket.Merge(m, src)
}
func (m *Ticket) XXX_Size() int {
	return m.Size()
}
func (m *Ticket) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticket.DiscardUnknown(m)
}

var xxx_messageInfo_Ticket proto.InternalMessageInfo

func (m *Ticket) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Ticket) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Ticket) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

// Draw contains the data of the next planned draw
type Draw struct {
	Participants uint32                                   `protobuf:"varint,1,opt,name=participants,proto3" json:"participants,omitempty"`
	TicketsSold  uint32                                   `protobuf:"varint,2,opt,name=tickets_sold,json=ticketsSold,proto3" json:"tickets_sold,omitempty"`
	Prize        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=prize,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"prize"`
	EndTime      time.Time                                `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
}

func (m *Draw) Reset()         { *m = Draw{} }
func (m *Draw) String() string { return proto.CompactTextString(m) }
func (*Draw) ProtoMessage()    {}
func (*Draw) Descriptor() ([]byte, []int) {
	return fileDescriptor_351a58cdbed24e72, []int{1}
}
func (m *Draw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Draw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Draw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Draw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Draw.Merge(m, src)
}
func (m *Draw) XXX_Size() int {
	return m.Size()
}
func (m *Draw) XXX_DiscardUnknown() {
	xxx_messageInfo_Draw.DiscardUnknown(m)
}

var xxx_messageInfo_Draw proto.InternalMessageInfo

func (m *Draw) GetParticipants() uint32 {
	if m != nil {
		return m.Participants
	}
	return 0
}

func (m *Draw) GetTicketsSold() uint32 {
	if m != nil {
		return m.TicketsSold
	}
	return 0
}

func (m *Draw) GetPrize() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Prize
	}
	return nil
}

func (m *Draw) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

// HistoricalDrawData contains the data of a past draw and its winner
type HistoricalDrawData struct {
	Draw          Draw   `protobuf:"bytes,1,opt,name=draw,proto3" json:"draw"`
	WinningTicket Ticket `protobuf:"bytes,2,opt,name=winning_ticket,json=winningTicket,proto3" json:"winning_ticket"`
}

func (m *HistoricalDrawData) Reset()         { *m = HistoricalDrawData{} }
func (m *HistoricalDrawData) String() string { return proto.CompactTextString(m) }
func (*HistoricalDrawData) ProtoMessage()    {}
func (*HistoricalDrawData) Descriptor() ([]byte, []int) {
	return fileDescriptor_351a58cdbed24e72, []int{2}
}
func (m *HistoricalDrawData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoricalDrawData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoricalDrawData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoricalDrawData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalDrawData.Merge(m, src)
}
func (m *HistoricalDrawData) XXX_Size() int {
	return m.Size()
}
func (m *HistoricalDrawData) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalDrawData.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalDrawData proto.InternalMessageInfo

func (m *HistoricalDrawData) GetDraw() Draw {
	if m != nil {
		return m.Draw
	}
	return Draw{}
}

func (m *HistoricalDrawData) GetWinningTicket() Ticket {
	if m != nil {
		return m.WinningTicket
	}
	return Ticket{}
}

func init() {
	proto.RegisterType((*Ticket)(nil), "cosmicbet.wta.v1beta1.Ticket")
	proto.RegisterType((*Draw)(nil), "cosmicbet.wta.v1beta1.Draw")
	proto.RegisterType((*HistoricalDrawData)(nil), "cosmicbet.wta.v1beta1.HistoricalDrawData")
}

func init() {
	proto.RegisterFile("cosmicbet/wta/v1beta1/models.proto", fileDescriptor_351a58cdbed24e72)
}

var fileDescriptor_351a58cdbed24e72 = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x31, 0x73, 0xd3, 0x3e,
	0x1c, 0x8d, 0x92, 0xb4, 0xff, 0x54, 0x6e, 0x3a, 0xe8, 0xfa, 0xbf, 0x33, 0xe1, 0xb0, 0x83, 0x17,
	0xb2, 0x20, 0xd1, 0x70, 0x2c, 0x2c, 0x1c, 0xa1, 0x03, 0xc7, 0x68, 0x3a, 0xb1, 0xe4, 0x64, 0x4b,
	0x18, 0x5d, 0x6d, 0xc9, 0x67, 0xa9, 0x18, 0x38, 0x3e, 0x44, 0x37, 0x18, 0x3b, 0xf3, 0x49, 0x3a,
	0x76, 0x64, 0xa2, 0x5c, 0xb2, 0xb0, 0xf2, 0x0d, 0x38, 0x49, 0x4e, 0x38, 0x38, 0x18, 0x98, 0x6c,
	0x3d, 0xbf, 0xdf, 0xd3, 0x7b, 0xcf, 0x3f, 0x98, 0xe4, 0x4a, 0x57, 0x22, 0xcf, 0xb8, 0x21, 0xad,
	0xa1, 0xe4, 0xf5, 0x51, 0xc6, 0x0d, 0x3d, 0x22, 0x95, 0x62, 0xbc, 0xd4, 0xb8, 0x6e, 0x94, 0x51,
	0xe8, 0xff, 0x2d, 0x07, 0xb7, 0x86, 0xe2, 0x8e, 0x33, 0x39, 0x2c, 0x54, 0xa1, 0x1c, 0x83, 0xd8,
	0x37, 0x4f, 0x9e, 0xc4, 0x85, 0x52, 0x45, 0xc9, 0x89, 0x3b, 0x65, 0x67, 0x2f, 0x89, 0x11, 0x15,
	0xd7, 0x86, 0x56, 0x75, 0x47, 0x88, 0xac, 0x9a, 0xd2, 0x24, 0xa3, 0x9a, 0x6f, 0xef, 0xcb, 0x95,
	0x90, 0xfe, 0x7b, 0xf2, 0x1e, 0xee, 0x9e, 0x88, 0xfc, 0x94, 0x1b, 0x74, 0x00, 0xfb, 0x82, 0x85,
	0x60, 0x0a, 0x66, 0x7b, 0x69, 0x5f, 0x30, 0x74, 0x08, 0x77, 0x54, 0x2b, 0x79, 0x13, 0xf6, 0x1d,
	0xe4, 0x0f, 0x68, 0x01, 0xf7, 0xb6, 0x57, 0x84, 0x83, 0x29, 0x98, 0x05, 0xf3, 0x09, 0xf6, 0x26,
	0xf0, 0xc6, 0x04, 0x3e, 0xd9, 0x30, 0x16, 0xa3, 0xcb, 0x2f, 0x71, 0xef, 0xfc, 0x3a, 0x06, 0xe9,
	0xcf, 0xb1, 0x87, 0xa3, 0x8f, 0x17, 0x31, 0xf8, 0x76, 0x11, 0x83, 0xe4, 0x3b, 0x80, 0xc3, 0xe3,
	0x86, 0xb6, 0x28, 0x81, 0xfb, 0x35, 0x6d, 0x8c, 0xc8, 0x45, 0x4d, 0xa5, 0xd1, 0xce, 0xc6, 0x38,
	0xfd, 0x05, 0x43, 0xb7, 0xe1, 0xbe, 0x71, 0x56, 0xf5, 0x52, 0xab, 0x92, 0x39, 0x5f, 0xe3, 0x34,
	0xe8, 0xb0, 0xe7, 0xaa, 0x64, 0x88, 0xc2, 0x9d, 0xba, 0x11, 0xef, 0x78, 0x38, 0x98, 0x0e, 0x66,
	0xc1, 0xfc, 0x06, 0xf6, 0xe9, 0xb1, 0x4d, 0xbf, 0x69, 0x12, 0x3f, 0x51, 0x42, 0x2e, 0xee, 0x59,
	0x63, 0x9f, 0xae, 0xe3, 0x59, 0x21, 0xcc, 0xab, 0xb3, 0x0c, 0xe7, 0xaa, 0x22, 0x5d, 0x55, 0xfe,
	0x71, 0x57, 0xb3, 0x53, 0x62, 0xde, 0xd6, 0x5c, 0xbb, 0x01, 0x9d, 0x7a, 0x65, 0xf4, 0x08, 0x8e,
	0xb8, 0x64, 0x4b, 0x9b, 0x26, 0x1c, 0xfe, 0x43, 0xfe, 0xff, 0xb8, 0x64, 0x16, 0x4f, 0x3e, 0x00,
	0x88, 0x9e, 0x0a, 0x6d, 0x54, 0x23, 0x72, 0x5a, 0xda, 0xf4, 0xc7, 0xd4, 0x50, 0xf4, 0x00, 0x0e,
	0x59, 0x43, 0x5b, 0x97, 0x3c, 0x98, 0xdf, 0xc4, 0x7f, 0xdc, 0x02, 0x6c, 0xe9, 0x8b, 0xa1, 0x15,
	0x4d, 0x1d, 0x1d, 0x3d, 0x83, 0x07, 0xad, 0x90, 0x52, 0xc8, 0x62, 0xe9, 0x8b, 0x70, 0xb5, 0x04,
	0xf3, 0x5b, 0x7f, 0x11, 0xf0, 0x3f, 0xbb, 0x93, 0x18, 0x77, 0xa3, 0x1d, 0xf8, 0xf8, 0x72, 0x15,
	0x81, 0xab, 0x55, 0x04, 0xbe, 0xae, 0x22, 0x70, 0xbe, 0x8e, 0x7a, 0x57, 0xeb, 0xa8, 0xf7, 0x79,
	0x1d, 0xf5, 0x5e, 0xdc, 0xf9, 0xad, 0x25, 0xbf, 0xc2, 0x25, 0x67, 0x05, 0x6f, 0xc8, 0x1b, 0xb7,
	0xcb, 0xae, 0xaa, 0x6c, 0xd7, 0x75, 0x70, 0xff, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xfb,
	0x7f, 0x33, 0xe9, 0x02, 0x00, 0x00,
}

func (this *Ticket) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ticket)
	if !ok {
		that2, ok := that.(Ticket)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	return true
}
func (m *Ticket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ticket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ticket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintModels(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Draw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Draw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Draw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintModels(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	if len(m.Prize) > 0 {
		for iNdEx := len(m.Prize) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prize[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TicketsSold != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.TicketsSold))
		i--
		dAtA[i] = 0x10
	}
	if m.Participants != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Participants))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HistoricalDrawData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoricalDrawData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoricalDrawData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.WinningTicket.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Draw.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintModels(dAtA []byte, offset int, v uint64) int {
	offset -= sovModels(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ticket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovModels(uint64(l))
	return n
}

func (m *Draw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Participants != 0 {
		n += 1 + sovModels(uint64(m.Participants))
	}
	if m.TicketsSold != 0 {
		n += 1 + sovModels(uint64(m.TicketsSold))
	}
	if len(m.Prize) > 0 {
		for _, e := range m.Prize {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovModels(uint64(l))
	return n
}

func (m *HistoricalDrawData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Draw.Size()
	n += 1 + l + sovModels(uint64(l))
	l = m.WinningTicket.Size()
	n += 1 + l + sovModels(uint64(l))
	return n
}

func sovModels(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ticket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ticket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ticket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Draw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Draw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Draw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			m.Participants = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Participants |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketsSold", wireType)
			}
			m.TicketsSold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TicketsSold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize, types.Coin{})
			if err := m.Prize[len(m.Prize)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoricalDrawData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoricalDrawData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoricalDrawData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Draw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinningTicket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WinningTicket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModels
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModels
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModels        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModels = fmt.Errorf("proto: unexpected end of group")
)
