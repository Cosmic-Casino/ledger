// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmicbet/wta/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryTicketsRequest is the request type for the Query/Tickets RPC method.
type QueryTicketsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTicketsRequest) Reset()         { *m = QueryTicketsRequest{} }
func (m *QueryTicketsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTicketsRequest) ProtoMessage()    {}
func (*QueryTicketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ba61453303e825, []int{0}
}
func (m *QueryTicketsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTicketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTicketsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTicketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTicketsRequest.Merge(m, src)
}
func (m *QueryTicketsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTicketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTicketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTicketsRequest proto.InternalMessageInfo

func (m *QueryTicketsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTicketsResponse is the response type for the Query/Tickets RPC method
type QueryTicketsResponse struct {
	Tickets    []Ticket            `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTicketsResponse) Reset()         { *m = QueryTicketsResponse{} }
func (m *QueryTicketsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTicketsResponse) ProtoMessage()    {}
func (*QueryTicketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ba61453303e825, []int{1}
}
func (m *QueryTicketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTicketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTicketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTicketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTicketsResponse.Merge(m, src)
}
func (m *QueryTicketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTicketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTicketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTicketsResponse proto.InternalMessageInfo

func (m *QueryTicketsResponse) GetTickets() []Ticket {
	if m != nil {
		return m.Tickets
	}
	return nil
}

func (m *QueryTicketsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDrawRequest is the request type for the Query/Draw RPC method.
type QueryNextDrawRequest struct {
}

func (m *QueryNextDrawRequest) Reset()         { *m = QueryNextDrawRequest{} }
func (m *QueryNextDrawRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextDrawRequest) ProtoMessage()    {}
func (*QueryNextDrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ba61453303e825, []int{2}
}
func (m *QueryNextDrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextDrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextDrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextDrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextDrawRequest.Merge(m, src)
}
func (m *QueryNextDrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextDrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextDrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextDrawRequest proto.InternalMessageInfo

// QueryDrawResponse is the response type for the Query/Draw RPC method
type QueryNextDrawResponse struct {
	Draw Draw `protobuf:"bytes,1,opt,name=draw,proto3" json:"draw"`
}

func (m *QueryNextDrawResponse) Reset()         { *m = QueryNextDrawResponse{} }
func (m *QueryNextDrawResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextDrawResponse) ProtoMessage()    {}
func (*QueryNextDrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ba61453303e825, []int{3}
}
func (m *QueryNextDrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextDrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextDrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextDrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextDrawResponse.Merge(m, src)
}
func (m *QueryNextDrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextDrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextDrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextDrawResponse proto.InternalMessageInfo

func (m *QueryNextDrawResponse) GetDraw() Draw {
	if m != nil {
		return m.Draw
	}
	return Draw{}
}

// QueryPastDrawsRequest is the request type for the Query/PastDraws RPC method.
type QueryPastDrawsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPastDrawsRequest) Reset()         { *m = QueryPastDrawsRequest{} }
func (m *QueryPastDrawsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPastDrawsRequest) ProtoMessage()    {}
func (*QueryPastDrawsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ba61453303e825, []int{4}
}
func (m *QueryPastDrawsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPastDrawsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPastDrawsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPastDrawsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPastDrawsRequest.Merge(m, src)
}
func (m *QueryPastDrawsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPastDrawsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPastDrawsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPastDrawsRequest proto.InternalMessageInfo

func (m *QueryPastDrawsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPastDrawsResponse is the response type for the Query/PastDraws RPC
// method
type QueryPastDrawsResponse struct {
	Draws      []HistoricalDrawData `protobuf:"bytes,1,rep,name=draws,proto3" json:"draws"`
	Pagination *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPastDrawsResponse) Reset()         { *m = QueryPastDrawsResponse{} }
func (m *QueryPastDrawsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPastDrawsResponse) ProtoMessage()    {}
func (*QueryPastDrawsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ba61453303e825, []int{5}
}
func (m *QueryPastDrawsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPastDrawsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPastDrawsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPastDrawsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPastDrawsResponse.Merge(m, src)
}
func (m *QueryPastDrawsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPastDrawsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPastDrawsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPastDrawsResponse proto.InternalMessageInfo

func (m *QueryPastDrawsResponse) GetDraws() []HistoricalDrawData {
	if m != nil {
		return m.Draws
	}
	return nil
}

func (m *QueryPastDrawsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ba61453303e825, []int{6}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ba61453303e825, []int{7}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryTicketsRequest)(nil), "cosmicbet.wta.v1beta1.QueryTicketsRequest")
	proto.RegisterType((*QueryTicketsResponse)(nil), "cosmicbet.wta.v1beta1.QueryTicketsResponse")
	proto.RegisterType((*QueryNextDrawRequest)(nil), "cosmicbet.wta.v1beta1.QueryNextDrawRequest")
	proto.RegisterType((*QueryNextDrawResponse)(nil), "cosmicbet.wta.v1beta1.QueryNextDrawResponse")
	proto.RegisterType((*QueryPastDrawsRequest)(nil), "cosmicbet.wta.v1beta1.QueryPastDrawsRequest")
	proto.RegisterType((*QueryPastDrawsResponse)(nil), "cosmicbet.wta.v1beta1.QueryPastDrawsResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "cosmicbet.wta.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "cosmicbet.wta.v1beta1.QueryParamsResponse")
}

func init() { proto.RegisterFile("cosmicbet/wta/v1beta1/query.proto", fileDescriptor_48ba61453303e825) }

var fileDescriptor_48ba61453303e825 = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0x73, 0x25, 0x4d, 0xe1, 0xba, 0x1d, 0x69, 0x55, 0x19, 0xea, 0xa6, 0x46, 0xb4, 0x49,
	0xa0, 0x77, 0x6a, 0x10, 0x13, 0x62, 0xa0, 0x2a, 0x7f, 0xa6, 0xaa, 0x44, 0x4c, 0x48, 0x08, 0x5d,
	0x92, 0x93, 0xb1, 0x48, 0x7c, 0xae, 0xef, 0x42, 0xd2, 0x95, 0x81, 0x81, 0x05, 0xa4, 0xee, 0xcc,
	0x7c, 0x11, 0xa4, 0x8e, 0x95, 0x58, 0x98, 0x10, 0x4a, 0xf8, 0x20, 0xc8, 0x77, 0xaf, 0x43, 0x12,
	0xc5, 0x69, 0x86, 0x6e, 0xd1, 0xe5, 0x79, 0x9f, 0xe7, 0xe7, 0xd7, 0x8f, 0x0f, 0x6f, 0x37, 0xa5,
	0xea, 0x04, 0xcd, 0x86, 0xd0, 0xac, 0xa7, 0x39, 0xfb, 0xb0, 0xdf, 0x10, 0x9a, 0xef, 0xb3, 0x93,
	0xae, 0x88, 0x4f, 0x69, 0x14, 0x4b, 0x2d, 0xc9, 0xda, 0x48, 0x42, 0x7b, 0x9a, 0x53, 0x90, 0x38,
	0x45, 0x5f, 0xfa, 0xd2, 0x28, 0x58, 0xf2, 0xcb, 0x8a, 0x9d, 0xdb, 0xbe, 0x94, 0x7e, 0x5b, 0x30,
	0x1e, 0x05, 0x8c, 0x87, 0xa1, 0xd4, 0x5c, 0x07, 0x32, 0x54, 0xf0, 0x6f, 0x35, 0xb1, 0x92, 0x8a,
	0x35, 0xb8, 0x12, 0x36, 0x63, 0x94, 0x18, 0x71, 0x3f, 0x08, 0x8d, 0x18, 0xb4, 0xde, 0x6c, 0xb2,
	0x8e, 0x6c, 0x89, 0xb6, 0x9a, 0xaf, 0x89, 0x78, 0xcc, 0x3b, 0xa0, 0xf1, 0xde, 0xe0, 0x9b, 0x2f,
	0x93, 0xa4, 0x57, 0x41, 0xf3, 0xbd, 0xd0, 0xaa, 0x2e, 0x4e, 0xba, 0x42, 0x69, 0xf2, 0x0c, 0xe3,
	0xff, 0x91, 0x1b, 0xa8, 0x84, 0xca, 0xab, 0xb5, 0x1d, 0x6a, 0xf9, 0x68, 0xc2, 0x47, 0xed, 0x0e,
	0xc0, 0x93, 0x1e, 0x73, 0x5f, 0xc0, 0x6c, 0x7d, 0x6c, 0xd2, 0xfb, 0x86, 0x70, 0x71, 0xd2, 0x5f,
	0x45, 0x32, 0x54, 0x82, 0x3c, 0xc6, 0x2b, 0xda, 0x1e, 0x6d, 0xa0, 0xd2, 0xb5, 0xf2, 0x6a, 0x6d,
	0x93, 0xce, 0x5c, 0x24, 0xb5, 0x83, 0x07, 0xf9, 0xf3, 0xdf, 0x5b, 0xb9, 0x7a, 0x3a, 0x43, 0x9e,
	0x4f, 0xf0, 0x2d, 0x19, 0xbe, 0xdd, 0x4b, 0xf9, 0x6c, 0xf6, 0x04, 0xe0, 0x3a, 0xf0, 0x1d, 0x89,
	0xbe, 0x3e, 0x8c, 0x79, 0x0f, 0x1e, 0xc2, 0x3b, 0xc2, 0x6b, 0x53, 0xe7, 0x00, 0xfe, 0x10, 0xe7,
	0x5b, 0x31, 0xef, 0xc1, 0x4e, 0x6e, 0x65, 0x50, 0x27, 0x23, 0xc0, 0x6c, 0xe4, 0xde, 0x5b, 0xf0,
	0x3b, 0xe6, 0xca, 0xf8, 0x5d, 0xf9, 0xa6, 0xbf, 0x23, 0xbc, 0x3e, 0x9d, 0x00, 0xc8, 0x4f, 0xf1,
	0x72, 0xc2, 0x90, 0x6e, 0xba, 0x92, 0xc1, 0xfc, 0x22, 0x50, 0x5a, 0xc6, 0x41, 0x93, 0xb7, 0x93,
	0xf1, 0x43, 0xae, 0x39, 0x3c, 0x81, 0x9d, 0xbe, 0xba, 0x9d, 0x17, 0x31, 0x01, 0xd2, 0xa4, 0x88,
	0xe9, 0xc6, 0xeb, 0xd0, 0xc4, 0xf4, 0x14, 0xe0, 0x1f, 0xe1, 0x82, 0x2d, 0x2c, 0xec, 0x26, 0xab,
	0x27, 0x76, 0x0c, 0x88, 0x61, 0xa4, 0xf6, 0x23, 0x8f, 0x97, 0x8d, 0x29, 0xf9, 0x8c, 0xf0, 0x0a,
	0x74, 0x90, 0x54, 0x33, 0x2c, 0x66, 0x7c, 0x08, 0xce, 0xbd, 0x85, 0xb4, 0x96, 0xd5, 0xdb, 0xf9,
	0xf8, 0xf3, 0xef, 0xd9, 0x52, 0x89, 0xb8, 0x6c, 0xf6, 0x97, 0x97, 0xb6, 0xf7, 0x0b, 0xc2, 0xd7,
	0xd3, 0x62, 0x91, 0xb9, 0x09, 0x53, 0xb5, 0x74, 0xee, 0x2f, 0x26, 0x06, 0x9e, 0xb2, 0xe1, 0xf1,
	0x48, 0x29, 0x83, 0x27, 0x14, 0x7d, 0xbd, 0x97, 0xbc, 0x5c, 0x72, 0x86, 0xf0, 0x8d, 0x51, 0x71,
	0xc8, 0xdc, 0x94, 0xe9, 0x06, 0x3b, 0x7b, 0x0b, 0xaa, 0x01, 0xaa, 0x62, 0xa0, 0xee, 0x90, 0x6d,
	0x96, 0x75, 0x3d, 0x29, 0x0b, 0xa5, 0xc8, 0x27, 0x84, 0x0b, 0xf6, 0xbd, 0x92, 0xca, 0xfc, 0x90,
	0xb1, 0x22, 0x39, 0xd5, 0x45, 0xa4, 0x00, 0x73, 0xd7, 0xc0, 0x6c, 0x91, 0x4d, 0x36, 0xef, 0xae,
	0x3c, 0x78, 0x72, 0x3e, 0x70, 0xd1, 0xc5, 0xc0, 0x45, 0x7f, 0x06, 0x2e, 0xfa, 0x3a, 0x74, 0x73,
	0x17, 0x43, 0x37, 0xf7, 0x6b, 0xe8, 0xe6, 0x5e, 0xef, 0xfa, 0x81, 0x7e, 0xd7, 0x6d, 0xd0, 0xa6,
	0xec, 0x8c, 0x59, 0xb4, 0x45, 0xcb, 0x17, 0x31, 0xeb, 0x1b, 0x2f, 0x7d, 0x1a, 0x09, 0xd5, 0x28,
	0x98, 0xfb, 0xf6, 0xc1, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0x8f, 0x62, 0xd2, 0x53, 0x06,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Tickets queries all the stored tickets for the next draw
	Tickets(ctx context.Context, in *QueryTicketsRequest, opts ...grpc.CallOption) (*QueryTicketsResponse, error)
	// NextDraw queries the next planned drawn
	NextDraw(ctx context.Context, in *QueryNextDrawRequest, opts ...grpc.CallOption) (*QueryNextDrawResponse, error)
	// PastDraws queries the past draws that have already been drawn
	PastDraws(ctx context.Context, in *QueryPastDrawsRequest, opts ...grpc.CallOption) (*QueryPastDrawsResponse, error)
	// Params queries the wta parameters
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Tickets(ctx context.Context, in *QueryTicketsRequest, opts ...grpc.CallOption) (*QueryTicketsResponse, error) {
	out := new(QueryTicketsResponse)
	err := c.cc.Invoke(ctx, "/cosmicbet.wta.v1beta1.Query/Tickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextDraw(ctx context.Context, in *QueryNextDrawRequest, opts ...grpc.CallOption) (*QueryNextDrawResponse, error) {
	out := new(QueryNextDrawResponse)
	err := c.cc.Invoke(ctx, "/cosmicbet.wta.v1beta1.Query/NextDraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PastDraws(ctx context.Context, in *QueryPastDrawsRequest, opts ...grpc.CallOption) (*QueryPastDrawsResponse, error) {
	out := new(QueryPastDrawsResponse)
	err := c.cc.Invoke(ctx, "/cosmicbet.wta.v1beta1.Query/PastDraws", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/cosmicbet.wta.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Tickets queries all the stored tickets for the next draw
	Tickets(context.Context, *QueryTicketsRequest) (*QueryTicketsResponse, error)
	// NextDraw queries the next planned drawn
	NextDraw(context.Context, *QueryNextDrawRequest) (*QueryNextDrawResponse, error)
	// PastDraws queries the past draws that have already been drawn
	PastDraws(context.Context, *QueryPastDrawsRequest) (*QueryPastDrawsResponse, error)
	// Params queries the wta parameters
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Tickets(ctx context.Context, req *QueryTicketsRequest) (*QueryTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tickets not implemented")
}
func (*UnimplementedQueryServer) NextDraw(ctx context.Context, req *QueryNextDrawRequest) (*QueryNextDrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextDraw not implemented")
}
func (*UnimplementedQueryServer) PastDraws(ctx context.Context, req *QueryPastDrawsRequest) (*QueryPastDrawsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PastDraws not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Tickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Tickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmicbet.wta.v1beta1.Query/Tickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Tickets(ctx, req.(*QueryTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextDraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextDrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextDraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmicbet.wta.v1beta1.Query/NextDraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextDraw(ctx, req.(*QueryNextDrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PastDraws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPastDrawsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PastDraws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmicbet.wta.v1beta1.Query/PastDraws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PastDraws(ctx, req.(*QueryPastDrawsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmicbet.wta.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmicbet.wta.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Tickets",
			Handler:    _Query_Tickets_Handler,
		},
		{
			MethodName: "NextDraw",
			Handler:    _Query_NextDraw_Handler,
		},
		{
			MethodName: "PastDraws",
			Handler:    _Query_PastDraws_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmicbet/wta/v1beta1/query.proto",
}

func (m *QueryTicketsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTicketsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTicketsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTicketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTicketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTicketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tickets) > 0 {
		for iNdEx := len(m.Tickets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tickets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextDrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextDrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextDrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNextDrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextDrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextDrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Draw.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPastDrawsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPastDrawsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPastDrawsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPastDrawsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPastDrawsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPastDrawsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Draws) > 0 {
		for iNdEx := len(m.Draws) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Draws[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTicketsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTicketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tickets) > 0 {
		for _, e := range m.Tickets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNextDrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNextDrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Draw.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPastDrawsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPastDrawsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Draws) > 0 {
		for _, e := range m.Draws {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTicketsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTicketsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTicketsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTicketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTicketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTicketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tickets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tickets = append(m.Tickets, Ticket{})
			if err := m.Tickets[len(m.Tickets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextDrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextDrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextDrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextDrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextDrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextDrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Draw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPastDrawsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPastDrawsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPastDrawsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPastDrawsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPastDrawsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPastDrawsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Draws = append(m.Draws, HistoricalDrawData{})
			if err := m.Draws[len(m.Draws)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
